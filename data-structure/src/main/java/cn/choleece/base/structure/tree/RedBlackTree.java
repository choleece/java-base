package cn.choleece.base.structure.tree;

/**
 * 红黑树 (https://zh.wikipedia.org/wiki/红黑树)
 * 顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色。
 * 除此BST的要求之外，一棵红黑树还需要满足这样几个要求：
 * 1. 节点是红色或黑色。
 * 2. 根是黑色。
 * 3. 所有叶子都是黑色（叶子是NIL节点）。
 * 4. 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）
 * 5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点 （简单路径的解释：一个没有重复顶点的道路称为简单道路 https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA)）
 *
 * 这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长
 *
 * 要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。
 * 最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。
 * @author choleece
 */
public class RedBlackTree {
}
